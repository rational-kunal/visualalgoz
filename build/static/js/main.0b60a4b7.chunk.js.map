{"version":3,"sources":["components/sorter/SortItem.js","components/sorter/SortAnimator.js","components/core/sort/BubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["SortItem","value","state","size","className","color","this","setState","setTimeout","style","width","height","margin","transition","React","Component","SortAnimator","min","max","sortingFunction","values","position","Q","animationQueue","sortItems","i","push","Math","random","refItems","map","x","createRef","ref","console","log","delay","newPositions","itemI","length","current","changeData","forceUpdate","onClick","animate","display","justifyContent","alignItems","bubbleSort","unsortedArray","positions","Array","keys","j","temp","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b60a4b7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './sortItem.css';\r\n\r\nconst ANIMATION_DURATION = 380;\r\n\r\nclass SortItem extends React.Component{\r\n\r\n    constructor({ value }) {\r\n        super(null);\r\n\r\n        this.state = { size: value, className:\"normal\" };\r\n    }\r\n\r\n    changeData({ size, color }) {\r\n        this.setState({ size: size });\r\n        this.setState({ className: \"focused\" });\r\n        // if (color) {\r\n        //     this.setState({ color: color });\r\n            setTimeout(()=>( this.setState({ className: \"normal\"}) ), ANIMATION_DURATION);\r\n        // }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className={ this.state.className }\r\n                style={{\r\n                    width: \"5vw\",\r\n                    height: this.state.size,\r\n                    margin: \"0.5vw\",\r\n                    transition: \"all 0.8s cubic-bezier(.38,1.08,0,1.19)\"\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortItem;\r\n","import React from \"react\";\nimport SortItem from \"./SortItem\";\n\nfunction randomBetween(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nclass SortAnimator extends React.Component {\n    values = [];\n    position = [0, 0];\n    Q = [];\n    animationQueue = [];\n    sortItems = [];\n\n    animate() {\n        let delay = 10;\n        for (let i = 0; i < this.animationQueue.length; i++) {\n            let newPositions = this.animationQueue[i];\n\n            setTimeout(() => {\n                for (let itemI = 0; itemI < newPositions.length; itemI++) {\n                    this.refItems[ newPositions[itemI][\"position\"] ].current.changeData({size: newPositions[itemI][\"value\"], color: newPositions[itemI][\"color\"]});\n                }\n\n                this.forceUpdate();\n            }, delay);\n            delay += 800;\n        }\n    }\n\n    constructor({ sortingFunction }) {\n        super(null);\n\n        for (let i=0; i<10; i++) {\n            this.values.push( randomBetween(100, 800) );\n        }\n\n        this.refItems = this.values.map(x => React.createRef());\n        this.sortItems = this.values.map((x, i) =>( <SortItem value={x} ref={ this.refItems[i] } /> ));\n\n        this.animationQueue = sortingFunction([...this.values]);\n\n        console.log(this.animationQueue);\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={() => this.animate()}>start</button>\n                <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", width: \"100vw\", height: \"100vh\" }}>\n                    { this.sortItems }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SortAnimator;\n","export default function bubbleSort(unsortedArray) {\n    let positions = [];\n    let position = [ ...Array(unsortedArray.length).keys() ];\n    for (let i = 0; i < unsortedArray.length; i++) {\n        for (let j = 0; j < unsortedArray.length - i - 1; j++) {\n            if (unsortedArray[j] > unsortedArray[j + 1]) {\n                let temp = unsortedArray[j];\n                unsortedArray[j] = unsortedArray[j + 1];\n                unsortedArray[j + 1] = temp;\n\n                [position[j], position[j+1]] = [position[j+1], position[j]];\n            }\n            positions.push([\n                { position: j, value: unsortedArray[j], color: \"brown\" },\n                { position: j+1, value: unsortedArray[j+1], color: \"brown\" }\n            ]);\n        }\n    }\n\n    return positions\n}\n","import React from \"react\";\n// import SortItem from \"./components/sorter/SortItem\";\n// import SortView from \"./components/sorter/SortView\";\nimport SortAnimator from \"./components/sorter/SortAnimator\";\nimport bubbleSort from \"./components/core/sort/BubbleSort\";\nimport quickSort from \"./components/core/sort/QuickSort\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SortAnimator sortingFunction={ bubbleSort } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}